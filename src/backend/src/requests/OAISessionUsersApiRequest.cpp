/**
 * Study-Test.Online - сервис проведения тестирования
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAISessionUsersApiRequest.h"

namespace OpenAPI {

OAISessionUsersApiRequest::OAISessionUsersApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAISessionUsersApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAISessionUsersApiRequest::~OAISessionUsersApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAISessionUsersApiRequest::~OAISessionUsersApiRequest()";
}

QMap<QString, QString>
OAISessionUsersApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAISessionUsersApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAISessionUsersApiRequest::getRawSocket(){
    return socket;
}


void OAISessionUsersApiRequest::getQuestionBySessionIDRequest(const QString& session_gidstr){
    qDebug() << "/question/{session_gid}";
    connect(this, &OAISessionUsersApiRequest::getQuestionBySessionID, handler.data(), &OAISessionUsersApiHandler::getQuestionBySessionID);


    QString session_gid;
    fromStringValue(session_gidstr, session_gid);


    emit getQuestionBySessionID(session_gid);
}


void OAISessionUsersApiRequest::getSessionStateRequest(const QString& session_gidstr){
    qDebug() << "/session/{session_gid}";
    connect(this, &OAISessionUsersApiRequest::getSessionState, handler.data(), &OAISessionUsersApiHandler::getSessionState);


    QString session_gid;
    fromStringValue(session_gidstr, session_gid);


    emit getSessionState(session_gid);
}


void OAISessionUsersApiRequest::pushAnswerRequest(){
    qDebug() << "/answers";
    connect(this, &OAISessionUsersApiRequest::pushAnswer, handler.data(), &OAISessionUsersApiHandler::pushAnswer);




    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIAnswer oai_answer;
    ::OpenAPI::fromJsonValue(oai_answer, obj);


    emit pushAnswer(oai_answer);
}


void OAISessionUsersApiRequest::startTestSessionRequest(){
    qDebug() << "/session";
    connect(this, &OAISessionUsersApiRequest::startTestSession, handler.data(), &OAISessionUsersApiHandler::startTestSession);

    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIChallengeID oai_challenge_id;
    ::OpenAPI::fromJsonValue(oai_challenge_id, obj);

    emit startTestSession(oai_challenge_id);
}



void OAISessionUsersApiRequest::getQuestionBySessionIDResponse(const OAIQuestion& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISessionUsersApiRequest::getSessionStateResponse(const OAISession& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISessionUsersApiRequest::pushAnswerResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISessionUsersApiRequest::startTestSessionResponse(const QString& res){
    setSocketResponseHeaders();
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}


void OAISessionUsersApiRequest::getQuestionBySessionIDError(const OAIQuestion& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISessionUsersApiRequest::getSessionStateError(const OAISession& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISessionUsersApiRequest::pushAnswerError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISessionUsersApiRequest::startTestSessionError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}


void OAISessionUsersApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAISessionUsersApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
