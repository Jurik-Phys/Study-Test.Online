/**
 * Study-Test.Online - сервис проведения тестирования
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIChallengesUsersApiRequest.h"

namespace OpenAPI {

OAIChallengesUsersApiRequest::OAIChallengesUsersApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIChallengesUsersApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIChallengesUsersApiRequest::~OAIChallengesUsersApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIChallengesUsersApiRequest::~OAIChallengesUsersApiRequest()";
}

QMap<QString, QString>
OAIChallengesUsersApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIChallengesUsersApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIChallengesUsersApiRequest::getRawSocket(){
    return socket;
}


void OAIChallengesUsersApiRequest::getAllChallengesRequest(){
    qDebug() << "/challenges";
    connect(this, &OAIChallengesUsersApiRequest::getAllChallenges, handler.data(), &OAIChallengesUsersApiHandler::getAllChallenges);

    


    emit getAllChallenges();
}


void OAIChallengesUsersApiRequest::getChallengeByIdRequest(const QString& challenge_gidstr){
    qDebug() << "/challenges/{challenge_gid}";
    connect(this, &OAIChallengesUsersApiRequest::getChallengeById, handler.data(), &OAIChallengesUsersApiHandler::getChallengeById);

    
    QString challenge_gid;
    fromStringValue(challenge_gidstr, challenge_gid);
    

    emit getChallengeById(challenge_gid);
}



void OAIChallengesUsersApiRequest::getAllChallengesResponse(const QList<OAIChallenge>& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIChallengesUsersApiRequest::getChallengeByIdResponse(const OAIChallenge& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIChallengesUsersApiRequest::getAllChallengesError(const QList<OAIChallenge>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIChallengesUsersApiRequest::getChallengeByIdError(const OAIChallenge& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIChallengesUsersApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIChallengesUsersApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
