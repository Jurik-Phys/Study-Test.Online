/**
 * Study-Test.Online - сервис проведения тестирования
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIChallengesAdministratorApiRequest.h"

namespace OpenAPI {

OAIChallengesAdministratorApiRequest::OAIChallengesAdministratorApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIChallengesAdministratorApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIChallengesAdministratorApiRequest::~OAIChallengesAdministratorApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIChallengesAdministratorApiRequest::~OAIChallengesAdministratorApiRequest()";
}

QMap<QString, QString>
OAIChallengesAdministratorApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIChallengesAdministratorApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIChallengesAdministratorApiRequest::getRawSocket(){
    return socket;
}


void OAIChallengesAdministratorApiRequest::addChallengeRequest(){
    qDebug() << "/challenges";
    connect(this, &OAIChallengesAdministratorApiRequest::addChallenge, handler.data(), &OAIChallengesAdministratorApiHandler::addChallenge);

    
 
    
    QJsonDocument doc;
    socket->readJson(doc);
    QJsonObject obj = doc.object();
    OAIChallenge oai_challenge;
    ::OpenAPI::fromJsonValue(oai_challenge, obj);
    

    emit addChallenge(oai_challenge);
}


void OAIChallengesAdministratorApiRequest::deleteChallengeByIdRequest(const QString& challenge_idstr){
    qDebug() << "/chellenges/{challenge_id}";
    connect(this, &OAIChallengesAdministratorApiRequest::deleteChallengeById, handler.data(), &OAIChallengesAdministratorApiHandler::deleteChallengeById);

    
    QString challenge_id;
    fromStringValue(challenge_idstr, challenge_id);
    

    emit deleteChallengeById(challenge_id);
}



void OAIChallengesAdministratorApiRequest::addChallengeResponse(const OAIChallenge& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIChallengesAdministratorApiRequest::deleteChallengeByIdResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIChallengesAdministratorApiRequest::addChallengeError(const OAIChallenge& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIChallengesAdministratorApiRequest::deleteChallengeByIdError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIChallengesAdministratorApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIChallengesAdministratorApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
