/**
 * Study-Test.Online - сервис проведения тестирования
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISession_testInfo_doneQuestionsArray_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISession_testInfo_doneQuestionsArray_inner::OAISession_testInfo_doneQuestionsArray_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISession_testInfo_doneQuestionsArray_inner::OAISession_testInfo_doneQuestionsArray_inner() {
    this->initializeModel();
}

OAISession_testInfo_doneQuestionsArray_inner::~OAISession_testInfo_doneQuestionsArray_inner() {}

void OAISession_testInfo_doneQuestionsArray_inner::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_do_answers_isSet = false;
    m_do_answers_isValid = false;
}

void OAISession_testInfo_doneQuestionsArray_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISession_testInfo_doneQuestionsArray_inner::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_do_answers_isValid = ::OpenAPI::fromJsonValue(do_answers, json[QString("doAnswers")]);
    m_do_answers_isSet = !json[QString("doAnswers")].isNull() && m_do_answers_isValid;
}

QString OAISession_testInfo_doneQuestionsArray_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISession_testInfo_doneQuestionsArray_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(body));
    }
    if (do_answers.size() > 0) {
        obj.insert(QString("doAnswers"), ::OpenAPI::toJsonValue(do_answers));
    }
    return obj;
}

QString OAISession_testInfo_doneQuestionsArray_inner::getBody() const {
    return body;
}
void OAISession_testInfo_doneQuestionsArray_inner::setBody(const QString &body) {
    this->body = body;
    this->m_body_isSet = true;
}

bool OAISession_testInfo_doneQuestionsArray_inner::is_body_Set() const{
    return m_body_isSet;
}

bool OAISession_testInfo_doneQuestionsArray_inner::is_body_Valid() const{
    return m_body_isValid;
}

QList<QString> OAISession_testInfo_doneQuestionsArray_inner::getDoAnswers() const {
    return do_answers;
}
void OAISession_testInfo_doneQuestionsArray_inner::setDoAnswers(const QList<QString> &do_answers) {
    this->do_answers = do_answers;
    this->m_do_answers_isSet = true;
}

bool OAISession_testInfo_doneQuestionsArray_inner::is_do_answers_Set() const{
    return m_do_answers_isSet;
}

bool OAISession_testInfo_doneQuestionsArray_inner::is_do_answers_Valid() const{
    return m_do_answers_isValid;
}

bool OAISession_testInfo_doneQuestionsArray_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (do_answers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISession_testInfo_doneQuestionsArray_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
