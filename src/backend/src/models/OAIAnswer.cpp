/**
 * Study-Test.Online - сервис проведения тестирования
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnswer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnswer::OAIAnswer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnswer::OAIAnswer() {
    this->initializeModel();
}

OAIAnswer::~OAIAnswer() {}

void OAIAnswer::initializeModel() {

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_question_id_isSet = false;
    m_question_id_isValid = false;

    m_answers_isSet = false;
    m_answers_isValid = false;
}

void OAIAnswer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnswer::fromJsonObject(QJsonObject json) {

    m_session_id_isValid = ::OpenAPI::fromJsonValue(session_id, json[QString("session_id")]);
    m_session_id_isSet = !json[QString("session_id")].isNull() && m_session_id_isValid;

    m_question_id_isValid = ::OpenAPI::fromJsonValue(question_id, json[QString("question_id")]);
    m_question_id_isSet = !json[QString("question_id")].isNull() && m_question_id_isValid;

    if(json["answers"].isArray()){
        auto arr = json["answers"].toArray();
        m_answers_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QString> item;
                m_answers_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_answers_isSet = !jval.isNull() && m_answers_isValid;
                answers.push_back(item);
            }
        }
    }
}

QString OAIAnswer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnswer::asJsonObject() const {
    QJsonObject obj;
    if (m_session_id_isSet) {
        obj.insert(QString("session_id"), ::OpenAPI::toJsonValue(session_id));
    }
    if (m_question_id_isSet) {
        obj.insert(QString("question_id"), ::OpenAPI::toJsonValue(question_id));
    }
    if (answers.size() > 0) {
        
        obj.insert(QString("answers"), toJsonValue(answers));
    }
    return obj;
}

QString OAIAnswer::getSessionId() const {
    return session_id;
}
void OAIAnswer::setSessionId(const QString &session_id) {
    this->session_id = session_id;
    this->m_session_id_isSet = true;
}

bool OAIAnswer::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIAnswer::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QString OAIAnswer::getQuestionId() const {
    return question_id;
}
void OAIAnswer::setQuestionId(const QString &question_id) {
    this->question_id = question_id;
    this->m_question_id_isSet = true;
}

bool OAIAnswer::is_question_id_Set() const{
    return m_question_id_isSet;
}

bool OAIAnswer::is_question_id_Valid() const{
    return m_question_id_isValid;
}

QList<QList<QString>> OAIAnswer::getAnswers() const {
    return answers;
}
void OAIAnswer::setAnswers(const QList<QList<QString>> &answers) {
    this->answers = answers;
    this->m_answers_isSet = true;
}

bool OAIAnswer::is_answers_Set() const{
    return m_answers_isSet;
}

bool OAIAnswer::is_answers_Valid() const{
    return m_answers_isValid;
}

bool OAIAnswer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (answers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnswer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_session_id_isValid && m_question_id_isValid && m_answers_isValid && true;
}

} // namespace OpenAPI
