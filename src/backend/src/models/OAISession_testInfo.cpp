/**
 * Study-Test.Online - сервис проведения тестирования
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISession_testInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISession_testInfo::OAISession_testInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISession_testInfo::OAISession_testInfo() {
    this->initializeModel();
}

OAISession_testInfo::~OAISession_testInfo() {}

void OAISession_testInfo::initializeModel() {

    m_total_question_isSet = false;
    m_total_question_isValid = false;

    m_test_type_isSet = false;
    m_test_type_isValid = false;

    m_section_isSet = false;
    m_section_isValid = false;

    m_subsection_isSet = false;
    m_subsection_isValid = false;

    m_test_annotation_isSet = false;
    m_test_annotation_isValid = false;

    m_done_questions_isSet = false;
    m_done_questions_isValid = false;

    m_done_questions_array_isSet = false;
    m_done_questions_array_isValid = false;
}

void OAISession_testInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISession_testInfo::fromJsonObject(QJsonObject json) {

    m_total_question_isValid = ::OpenAPI::fromJsonValue(total_question, json[QString("totalQuestions")]);
    m_total_question_isSet = !json[QString("totalQuestions")].isNull() && m_total_question_isValid;

    m_test_type_isValid = ::OpenAPI::fromJsonValue(test_type, json[QString("testType")]);
    m_test_type_isSet = !json[QString("testType")].isNull() && m_test_type_isValid;

    m_section_isValid = ::OpenAPI::fromJsonValue(section, json[QString("section")]);
    m_section_isSet = !json[QString("section")].isNull() && m_section_isValid;

    m_subsection_isValid = ::OpenAPI::fromJsonValue(subsection, json[QString("subsection")]);
    m_subsection_isSet = !json[QString("subsection")].isNull() && m_subsection_isValid;

    m_test_annotation_isValid = ::OpenAPI::fromJsonValue(test_annotation, json[QString("testAnnotation")]);
    m_test_annotation_isSet = !json[QString("testAnnotation")].isNull() && m_test_annotation_isValid;

    m_done_questions_isValid = ::OpenAPI::fromJsonValue(done_questions, json[QString("doneQuestions")]);
    m_done_questions_isSet = !json[QString("doneQuestions")].isNull() && m_done_questions_isValid;

    m_done_questions_array_isValid = ::OpenAPI::fromJsonValue(done_questions_array, json[QString("doneQuestionsArray")]);
    m_done_questions_array_isSet = !json[QString("doneQuestionsArray")].isNull() && m_done_questions_array_isValid;
}

QString OAISession_testInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISession_testInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_total_question_isSet) {
        obj.insert(QString("totalQuestions"), ::OpenAPI::toJsonValue(total_question));
    }
    if (m_test_type_isSet) {
        obj.insert(QString("testType"), ::OpenAPI::toJsonValue(test_type));
    }
    if (m_section_isSet) {
        obj.insert(QString("section"), ::OpenAPI::toJsonValue(section));
    }
    if (m_subsection_isSet) {
        obj.insert(QString("subsection"), ::OpenAPI::toJsonValue(subsection));
    }
    if (m_test_annotation_isSet) {
        obj.insert(QString("testAnnotation"), ::OpenAPI::toJsonValue(test_annotation));
    }
    if (m_done_questions_isSet) {
        obj.insert(QString("doneQuestions"), ::OpenAPI::toJsonValue(done_questions));
    }
    if (done_questions_array.size() > 0) {
        obj.insert(QString("doneQuestionsArray"), ::OpenAPI::toJsonValue(done_questions_array));
    }
    return obj;
}

double OAISession_testInfo::getTotalQuestion() const {
    return total_question;
}
void OAISession_testInfo::setTotalQuestion(const double &total_question) {
    this->total_question = total_question;
    this->m_total_question_isSet = true;
}

bool OAISession_testInfo::is_total_question_Set() const{
    return m_total_question_isSet;
}

bool OAISession_testInfo::is_total_question_Valid() const{
    return m_total_question_isValid;
}

QString OAISession_testInfo::getTestType() const {
    return test_type;
}
void OAISession_testInfo::setTestType(const QString &test_type) {
    this->test_type = test_type;
    this->m_test_type_isSet = true;
}

bool OAISession_testInfo::is_test_type_Set() const{
    return m_test_type_isSet;
}

bool OAISession_testInfo::is_test_type_Valid() const{
    return m_test_type_isValid;
}

QString OAISession_testInfo::getSection() const {
    return section;
}
void OAISession_testInfo::setSection(const QString &section) {
    this->section = section;
    this->m_section_isSet = true;
}

bool OAISession_testInfo::is_section_Set() const{
    return m_section_isSet;
}

bool OAISession_testInfo::is_section_Valid() const{
    return m_section_isValid;
}

QString OAISession_testInfo::getSubsection() const {
    return subsection;
}
void OAISession_testInfo::setSubsection(const QString &subsection) {
    this->subsection = subsection;
    this->m_subsection_isSet = true;
}

bool OAISession_testInfo::is_subsection_Set() const{
    return m_subsection_isSet;
}

bool OAISession_testInfo::is_subsection_Valid() const{
    return m_subsection_isValid;
}

QString OAISession_testInfo::getTestAnnotation() const {
    return test_annotation;
}
void OAISession_testInfo::setTestAnnotation(const QString &test_annotation) {
    this->test_annotation = test_annotation;
    this->m_test_annotation_isSet = true;
}

bool OAISession_testInfo::is_test_annotation_Set() const{
    return m_test_annotation_isSet;
}

bool OAISession_testInfo::is_test_annotation_Valid() const{
    return m_test_annotation_isValid;
}

double OAISession_testInfo::getDoneQuestions() const {
    return done_questions;
}
void OAISession_testInfo::setDoneQuestions(const double &done_questions) {
    this->done_questions = done_questions;
    this->m_done_questions_isSet = true;
}

bool OAISession_testInfo::is_done_questions_Set() const{
    return m_done_questions_isSet;
}

bool OAISession_testInfo::is_done_questions_Valid() const{
    return m_done_questions_isValid;
}

QList<OAISession_testInfo_doneQuestionsArray_inner> OAISession_testInfo::getDoneQuestionsArray() const {
    return done_questions_array;
}
void OAISession_testInfo::setDoneQuestionsArray(const QList<OAISession_testInfo_doneQuestionsArray_inner> &done_questions_array) {
    this->done_questions_array = done_questions_array;
    this->m_done_questions_array_isSet = true;
}

bool OAISession_testInfo::is_done_questions_array_Set() const{
    return m_done_questions_array_isSet;
}

bool OAISession_testInfo::is_done_questions_array_Valid() const{
    return m_done_questions_array_isValid;
}

bool OAISession_testInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_question_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subsection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_annotation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_done_questions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (done_questions_array.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISession_testInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
