/**
 * Study-Test.Online - сервис проведения тестирования
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISession::OAISession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISession::OAISession() {
    this->initializeModel();
}

OAISession::~OAISession() {}

void OAISession::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_begin_at_isSet = false;
    m_begin_at_isValid = false;

    m_end_at_isSet = false;
    m_end_at_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_user_info_isSet = false;
    m_user_info_isValid = false;

    m_test_info_isSet = false;
    m_test_info_isValid = false;
}

void OAISession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISession::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_begin_at_isValid = ::OpenAPI::fromJsonValue(begin_at, json[QString("beginAt")]);
    m_begin_at_isSet = !json[QString("beginAt")].isNull() && m_begin_at_isValid;

    m_end_at_isValid = ::OpenAPI::fromJsonValue(end_at, json[QString("endAt")]);
    m_end_at_isSet = !json[QString("endAt")].isNull() && m_end_at_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_user_info_isValid = ::OpenAPI::fromJsonValue(user_info, json[QString("userInfo")]);
    m_user_info_isSet = !json[QString("userInfo")].isNull() && m_user_info_isValid;

    m_test_info_isValid = ::OpenAPI::fromJsonValue(test_info, json[QString("testInfo")]);
    m_test_info_isSet = !json[QString("testInfo")].isNull() && m_test_info_isValid;
}

QString OAISession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISession::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (m_begin_at_isSet) {
        obj.insert(QString("beginAt"), ::OpenAPI::toJsonValue(begin_at));
    }
    if (m_end_at_isSet) {
        obj.insert(QString("endAt"), ::OpenAPI::toJsonValue(end_at));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(result));
    }
    if (user_info.isSet()) {
        obj.insert(QString("userInfo"), ::OpenAPI::toJsonValue(user_info));
    }
    if (test_info.isSet()) {
        obj.insert(QString("testInfo"), ::OpenAPI::toJsonValue(test_info));
    }
    return obj;
}

QString OAISession::getId() const {
    return id;
}
void OAISession::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAISession::is_id_Set() const{
    return m_id_isSet;
}

bool OAISession::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISession::getStatus() const {
    return status;
}
void OAISession::setStatus(const QString &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool OAISession::is_status_Set() const{
    return m_status_isSet;
}

bool OAISession::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISession::getBeginAt() const {
    return begin_at;
}
void OAISession::setBeginAt(const QString &begin_at) {
    this->begin_at = begin_at;
    this->m_begin_at_isSet = true;
}

bool OAISession::is_begin_at_Set() const{
    return m_begin_at_isSet;
}

bool OAISession::is_begin_at_Valid() const{
    return m_begin_at_isValid;
}

QString OAISession::getEndAt() const {
    return end_at;
}
void OAISession::setEndAt(const QString &end_at) {
    this->end_at = end_at;
    this->m_end_at_isSet = true;
}

bool OAISession::is_end_at_Set() const{
    return m_end_at_isSet;
}

bool OAISession::is_end_at_Valid() const{
    return m_end_at_isValid;
}

QString OAISession::getResult() const {
    return result;
}
void OAISession::setResult(const QString &result) {
    this->result = result;
    this->m_result_isSet = true;
}

bool OAISession::is_result_Set() const{
    return m_result_isSet;
}

bool OAISession::is_result_Valid() const{
    return m_result_isValid;
}

OAISession_userInfo OAISession::getUserInfo() const {
    return user_info;
}
void OAISession::setUserInfo(const OAISession_userInfo &user_info) {
    this->user_info = user_info;
    this->m_user_info_isSet = true;
}

bool OAISession::is_user_info_Set() const{
    return m_user_info_isSet;
}

bool OAISession::is_user_info_Valid() const{
    return m_user_info_isValid;
}

OAISession_testInfo OAISession::getTestInfo() const {
    return test_info;
}
void OAISession::setTestInfo(const OAISession_testInfo &test_info) {
    this->test_info = test_info;
    this->m_test_info_isSet = true;
}

bool OAISession::is_test_info_Set() const{
    return m_test_info_isSet;
}

bool OAISession::is_test_info_Valid() const{
    return m_test_info_isValid;
}

bool OAISession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_begin_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (user_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (test_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISession::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_status_isValid && m_begin_at_isValid && m_end_at_isValid && m_result_isValid && m_user_info_isValid && m_test_info_isValid && true;
}

} // namespace OpenAPI
